name: Generate Index Files

on:
  push:
    branches:
      - main
    paths:
      - 'DATA/**'
      - '.github/workflows/generate-index.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'DATA/**'
      - '.github/workflows/generate-index.yml'
  workflow_dispatch:
  repository_dispatch:
    types: [update_index]

permissions:
  contents: write

jobs:
  generate-index:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install xml2js
          
      - name: Generate index files
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const xml2js = require('xml2js');
          
          async function parseXML(xmlPath) {
            try {
              const xmlContent = fs.readFileSync(xmlPath, 'utf8');
              const parser = new xml2js.Parser({
                explicitArray: true,
                mergeAttrs: true
              });
              const result = await parser.parseStringPromise(xmlContent);
              return result.resource;
            } catch (error) {
              console.error('Error parsing XML file ' + xmlPath + ':', error);
              return null;
            }
          }
          
          async function generateIndex(baseDir) {
            if (!fs.existsSync(baseDir)) {
              console.log('Directory ' + baseDir + ' does not exist');
              return;
            }
            
            try {
              const subDirs = fs.readdirSync(baseDir)
                .filter(file => fs.statSync(path.join(baseDir, file)).isDirectory());
              
              console.log('Found ' + subDirs.length + ' directories in ' + baseDir);
              
              const items = await Promise.all(
                subDirs.map(async dirName => {
                  const fullDirPath = path.join(baseDir, dirName);
                  const xmlPath = path.join(fullDirPath, 'info.xml');
                  
                  if (!fs.existsSync(xmlPath)) {
                    console.log('Skipping incomplete directory: ' + fullDirPath);
                    return null;
                  }
                  
                  const xmlData = await parseXML(xmlPath);
                  if (!xmlData) {
                    console.log('Skipping directory with invalid XML: ' + fullDirPath);
                    return null;
                  }
                  
                  console.log('XML data for ' + dirName + ':', JSON.stringify(xmlData, null, 2));
                  
                  const item = {
                    name: xmlData.name?.[0] || dirName,
                    path: fullDirPath.replace(/\\\\/g, '/'),
                    author: xmlData.author?.[0] || '',
                    description: xmlData.description?.[0] || '',
                    gameVersion: xmlData.gameVersion?.[0] || ''
                  };
                  
                  Object.keys(xmlData).forEach(key => {
                    if (!['name', 'author', 'description', 'gameVersion'].includes(key)) {
                      if (Array.isArray(xmlData[key])) {
                        item[key] = xmlData[key][0];
                      } else {
                        item[key] = xmlData[key];
                      }
                    }
                  });
                  
                  if (xmlData.imageFile?.[0]) {
                    const imagePath = path.join(fullDirPath, xmlData.imageFile[0]);
                    if (fs.existsSync(imagePath)) {
                      item.imageSize = fs.statSync(imagePath).size;
                      console.log('Added imageSize:', item.imageSize);
                    }
                  }
                  
                  if (xmlData.resourceFile?.[0]) {
                    const resourcePath = path.join(fullDirPath, xmlData.resourceFile[0]);
                    if (fs.existsSync(resourcePath)) {
                      item.resourceSize = fs.statSync(resourcePath).size;
                      console.log('Added resourceSize:', item.resourceSize);
                    }
                  }
                  
                  if (baseDir.includes('/mods/')) {
                    if (xmlData.type?.[0]) {
                      item.type = xmlData.type[0];
                      console.log('Added type:', item.type);
                    }
                    if (xmlData.isModify?.[0]) {
                      item.isModify = xmlData.isModify[0] === 'true';
                      console.log('Added isModify:', item.isModify);
                    }
                  } else if (baseDir.includes('/maps/')) {
                    if (xmlData.size?.[0]) {
                      item.size = xmlData.size[0];
                      console.log('Added size:', item.size);
                    }
                    if (xmlData.type?.[0]) {
                      item.type = xmlData.type[0];
                      console.log('Added type:', item.type);
                    }
                  }
                  
                  console.log('Generated item for ' + dirName + ':', JSON.stringify(item, null, 2));
                  return item;
                })
              );
              
              const validItems = items.filter(item => item !== null);
              const indexPath = path.join(baseDir, 'index.json');
              fs.writeFileSync(indexPath, JSON.stringify(validItems, null, 2));
              console.log('Generated ' + indexPath + ' with ' + validItems.length + ' items');
              
              console.log('Changes in index:');
              validItems.forEach(item => {
                console.log('- ' + item.name + ' (Path: ' + item.path + ')');
              });
            } catch (error) {
              console.error('Error processing ' + baseDir + ':', error);
            }
          }
          
          Promise.all([
            generateIndex('DATA/mods'),
            generateIndex('DATA/maps')
          ]).then(() => {
            console.log('Index generation completed');
          }).catch(error => {
            console.error('Error during index generation:', error);
            process.exit(1);
          });
          "
          
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -f "DATA/mods/index.json" ]; then
            git add DATA/mods/index.json
          fi
          
          if [ -f "DATA/maps/index.json" ]; then
            git add DATA/maps/index.json
          fi
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update index files with XML data"
            git push
            
            echo "清除 jsDelivr 缓存..."
            curl -X POST "https://purge.jsdelivr.net/gh/MORAN-hub-code/MORAN-hub-code.github.io@main/DATA/mods/index.json"
            curl -X POST "https://purge.jsdelivr.net/gh/MORAN-hub-code/MORAN-hub-code.github.io@main/DATA/maps/index.json"
          fi 