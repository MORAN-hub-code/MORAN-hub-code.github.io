name: Generate Index Files

on:
  push:
    paths:
      - 'DATA/**'
      - '.github/workflows/generate-index.yml'
  pull_request:
    paths:
      - 'DATA/**'
      - '.github/workflows/generate-index.yml'
  workflow_dispatch:
  repository_dispatch:
    types: [update_index]

permissions:
  contents: write

jobs:
  generate-index:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # 获取完整的 git 历史
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install xml2js
          
      - name: Generate index files
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const xml2js = require('xml2js');
          
          async function parseXML(xmlPath) {
            try {
              const xmlContent = fs.readFileSync(xmlPath, 'utf8');
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(xmlContent);
              return result.resource;
            } catch (error) {
              console.error(\`Error parsing XML file \${xmlPath}:\`, error);
              return null;
            }
          }
          
          async function generateIndex(dirPath) {
            if (!fs.existsSync(dirPath)) {
              console.log(\`Directory \${dirPath} does not exist\`);
              return;
            }
            
            try {
              // 获取所有子目录
              const subDirs = fs.readdirSync(dirPath)
                .filter(file => fs.statSync(path.join(dirPath, file)).isDirectory());
              
              console.log(\`Found \${subDirs.length} directories in \${dirPath}\`);
              
              const items = await Promise.all(
                subDirs.map(async dir => {
                  const dirPath = path.join(dirPath, dir);
                  const xmlPath = path.join(dirPath, 'info.xml');
                  
                  // 检查目录是否完整
                  if (!fs.existsSync(xmlPath)) {
                    console.log(\`Skipping incomplete directory: \${dirPath}\`);
                    return null;
                  }
                  
                  const xmlData = await parseXML(xmlPath);
                  if (!xmlData) {
                    console.log(\`Skipping directory with invalid XML: \${dirPath}\`);
                    return null;
                  }
                  
                  const item = {
                    name: dir,
                    path: path.join(dirPath, dir).replace(/\\\\/g, '/')
                  };
                  
                  // 添加XML中的信息
                  item.author = xmlData.author?.[0] || '';
                  item.description = xmlData.description?.[0] || '';
                  item.gameVersion = xmlData.gameVersion?.[0] || '';
                  
                  // 根据目录类型添加特定字段
                  if (dirPath.includes('/mods/')) {
                    item.type = xmlData.type?.[0] || '';
                    item.isModify = xmlData.isModify?.[0] || 'false';
                  } else if (dirPath.includes('/maps/')) {
                    item.size = xmlData.size?.[0] || '';
                  }
                  
                  // 添加文件大小信息
                  const imageFile = xmlData.imageFile?.[0];
                  const resourceFile = xmlData.resourceFile?.[0];
                  
                  if (imageFile) {
                    const imagePath = path.join(dirPath, imageFile);
                    if (fs.existsSync(imagePath)) {
                      item.imageSize = fs.statSync(imagePath).size;
                    }
                  }
                  
                  if (resourceFile) {
                    const resourcePath = path.join(dirPath, resourceFile);
                    if (fs.existsSync(resourcePath)) {
                      item.resourceSize = fs.statSync(resourcePath).size;
                    }
                  }
                  
                  return item;
                })
              );
              
              // 过滤掉无效的项
              const validItems = items.filter(item => item !== null);
              
              const indexPath = path.join(dirPath, 'index.json');
              fs.writeFileSync(indexPath, JSON.stringify(validItems, null, 2));
              console.log(\`Generated \${indexPath} with \${validItems.length} items\`);
              
              // 输出变更日志
              console.log('Changes in index:');
              validItems.forEach(item => {
                console.log(\`- \${item.name} (Path: \${item.path})\`);
              });
            } catch (error) {
              console.error(\`Error processing \${dirPath}:\`, error);
            }
          }
          
          // 生成索引文件
          Promise.all([
            generateIndex('DATA/mods'),
            generateIndex('DATA/maps')
          ]).then(() => {
            console.log('Index generation completed');
          }).catch(error => {
            console.error('Error during index generation:', error);
            process.exit(1);
          });
          "
          
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 检查文件是否存在并添加
          if [ -f "DATA/mods/index.json" ]; then
            git add DATA/mods/index.json
          fi
          
          if [ -f "DATA/maps/index.json" ]; then
            git add DATA/maps/index.json
          fi
          
          # 只有在有更改时才提交和推送
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update index files with XML data"
            git push
            
            # 清除 jsDelivr 缓存
            echo "清除 jsDelivr 缓存..."
            curl -X POST "https://purge.jsdelivr.net/gh/MORAN-hub-code/MORAN-hub-code.github.io@main/DATA/mods/index.json"
            curl -X POST "https://purge.jsdelivr.net/gh/MORAN-hub-code/MORAN-hub-code.github.io@main/DATA/maps/index.json"
          fi 